import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import mean_squared_error
import joblib
import os

# --- Preprocessing Function ---
def preprocess_data(df, target_col='Rating'):
    features = df.drop(columns=[target_col])
    target = df[target_col]

    categorical_cols = features.select_dtypes(include=['object']).columns

    preprocessor = ColumnTransformer(
        transformers=[
            ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_cols)
        ],
        remainder='passthrough'
    )

    X_processed = preprocessor.fit_transform(features)
    return X_processed, target, preprocessor


def train_model(file_path):
    df = pd.read_csv(file_path, encoding='ISO-8859-1')

    print("\nüìå Columns in your dataset:")
    print(df.columns.tolist())

    # Drop rows with missing target or features
    df = df.dropna(subset=['Genre', 'Director', 'Actor 1', 'Actor 2', 'Actor 3', 'Rating'])

    # Select relevant columns
    df = df[['Genre', 'Director', 'Actor 1', 'Actor 2', 'Actor 3', 'Rating']]

    X, y, preprocessor = preprocess_data(df)

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    model = LinearRegression()
    model.fit(X_train, y_train)

    predictions = model.predict(X_test)
    rmse = np.sqrt(mean_squared_error(y_test, predictions))
    print(f"\n‚úÖ Model trained. RMSE: {rmse:.2f}")

    joblib.dump(model, 'movie_model.pkl')
    joblib.dump(preprocessor, 'preprocessor.pkl')
    print("‚úÖ Model and preprocessor saved successfully.\n")


def predict_from_user():
    if not os.path.exists("movie_model.pkl") or not os.path.exists("preprocessor.pkl"):
        print("‚ö†Ô∏è Model files not found. Train the model first.")
        return

    model = joblib.load("movie_model.pkl")
    preprocessor = joblib.load("preprocessor.pkl")

    print("\nüé¨ Enter movie details to predict the rating:")
    genre = input("Genre (e.g., Action): ")
    director = input("Director (e.g., Rajkumar Hirani): ")
    actor1 = input("Actor 1: ")
    actor2 = input("Actor 2: ")
    actor3 = input("Actor 3: ")

    input_dict = {
        'Genre': genre,
        'Director': director,
        'Actor 1': actor1,
        'Actor 2': actor2,
        'Actor 3': actor3
    }

    input_df = pd.DataFrame([input_dict])
    X_input = preprocessor.transform(input_df)

    predicted_rating = model.predict(X_input)
    print(f"\n‚≠ê Predicted IMDb Rating: {predicted_rating[0]:.2f}\n")

if __name__ == "__main__":
    print("üéØ Movie Rating Prediction System")
    print("1. Train model")
    print("2. Predict rating for a new movie")
    choice = input("Choose an option (1 or 2): ")

    if choice == '1':
        file_path = "C:/Users/HP/Downloads/IMDb Movies India.csv"  # <- Update if needed
        train_model(file_path)
    elif choice == '2':
        predict_from_user()
    else:
        print("‚ùå Invalid option selected.")
